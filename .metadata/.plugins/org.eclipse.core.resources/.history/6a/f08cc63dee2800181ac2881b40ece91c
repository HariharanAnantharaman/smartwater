package com.techolution.mauritius.smartwater.map.service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.influxdb.InfluxDB;
import org.influxdb.InfluxDBFactory;
import org.influxdb.dto.Query;
import org.influxdb.dto.QueryResult;
import org.influxdb.dto.QueryResult.Result;
import org.influxdb.dto.QueryResult.Series;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.techolution.mauritius.smartwater.domain.MeterConnection;
import com.techolution.mauritius.smartwater.domain.MeterConsumption;
import com.techolution.mauritius.smartwater.domain.RequestData;

@Component
public class MapDataService {
	
	private Log log = LogFactory.getLog(MapDataService.class);
	
	 //RestTemplate restTemplate;
	
	 public RestTemplate restTemplate() {
		    return new RestTemplate();
		}
		
	
	public List<MeterConsumption> getDataForAllConnections(RequestData data){
		
		
		log.info("Entering MapDataService.getDataForAllConnections ");
		
		
		ResponseEntity<Object[]> responseEntity = restTemplate().getForEntity("http://localhost:8082/consolidateddata/connections",Object[].class);
//		List<MeterConnection> availableConnections=restTemplate().getForObject("http://localhost:8082/consolidateddata/connections", ArrayList.class);

		Object[] returnedobjects = (Object[])responseEntity.getBody();
	//	ArrayList<MeterConnection> availableConnections =Arrays.asList(returnedobjects);
		List<MeterConnection> availableConnections =Arrays.asList(returnedobjects);


		//availableConnections.

		
		log.debug("List size returned is:"+availableConnections.size());
		//For each of the returned value call influx and resturn
		
		String endTime = data.getEnd_Time();
		//String endTime = "2018-03-15";
		
		String startTime = data.getStart_Time();
		
		int deviceId=data.getHouse_ID();
		//int deviceId=123;
				
		
		InfluxDB influxDB = InfluxDBFactory.connect("http://localhost:32768", "root", "root");
		String dbName = "mauritius_smartwater";
		
		SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
		myFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
		String locationName= "TEST";
		
		List<MeterConsumption> resultList=new ArrayList<MeterConsumption>();
				
		availableConnections.parallelStream().forEach(meterConnection -> {
			
			String query = "select sum(value)  from flow where time >='"+startTime+"' and time<'"+endTime+"' and meter_id='"+meterConnection+"'";// now() - 10d and meter_id = '124' group by time(1d) fill(0)
			log.debug("Query is:"+query);
			QueryResult queryResult = influxDB.query(new Query(query, dbName));
			List<Result> resultlist=queryResult.getResults();
			double consumption=0.0;
			String endDate=null;
			if(resultlist != null && resultlist.size()>0 ){
				Result result = resultlist.get(0);
				if(result .getSeries() != null && result.getSeries().size()>0){
					Series series=result.getSeries().get(0);
					endDate=(String)series.getValues().get(0).get(0);
					 consumption=((Double)series.getValues().get(0).get(1)).doubleValue();
					
				}
				
			}
			MeterConsumption meterconsumption=new MeterConsumption(meterConnection);
			if(endDate!=null){
				try {
					Date date=myFormat.parse(endDate);
					meterconsumption.setEndTime(date);
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}	
			meterconsumption.setWdata(consumption);
			resultList.add(meterconsumption);
		});
		
		influxDB.close();
		log.info("Exiting MapDataService.getDataForAllConnections ");
		return resultList;
	}

}
